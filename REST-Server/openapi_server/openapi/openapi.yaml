openapi: 3.0.0
info:
  description: This API specification is for the World Modelers Modeling Service System. The goal of this API is to provide a controller for model discovery and exploration, as well as for initializing and managing model runs.
  title: ModelService API
  version: 1.0.0
servers:
- description: Future (production) server
  url: https://model-service.worldmodelers.com
- description: Local server for testing
  url: http://localhost:8080
paths:
  /list_models:
    post:
      description: Request a list of currently available models.
      operationId: list_models_post
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableModels'
          description: SUCCESS
      summary: Obtain a list of current models
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_info/{ModelName}:
    get:
      description: Submit a model name and receive metadata information about the model, such as its purpose, who maintains it, and how it can be run.
      operationId: model_info_model_name_get
      parameters:
      - description: The name of a model.
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: SUCCESS
      summary: Get basic metadata information for a specified model.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_io:
    post:
      description: Submit a model name and receive information about the input or output files required by this model.
      operationId: model_io_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IORequest'
        description: The name of a model and an IO type.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelIO'
          description: SUCCESS
      summary: Obtain information on a given model's inputs or outputs.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_parameters/{ModelName}:
    post:
      description: Submit a model name and receive information about the parameters used by this model. Specific parameters are used on a per-configuration basis.
      operationId: model_parameters_model_name_post
      parameters:
      - description: The name of a model.
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Parameter'
                type: array
          description: SUCCESS
      summary: Obtain information about a model's parameters.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_config/{ModelName}:
    get:
      description: Submit a model name and receive all configurations for the given model.
      operationId: model_config_model_name_get
      parameters:
      - description: The name of a model.
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelConfig'
                type: array
          description: SUCCESS
      summary: Obtain configurations for a given model.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /search:
    post:
      description: Search for a model, dataset, or variable based on name or standard name
      operationId: search_post
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                propertyName: query_type
              oneOf:
              - $ref: '#/components/schemas/GeoQuery'
              - $ref: '#/components/schemas/TimeQuery'
              - $ref: '#/components/schemas/TextQuery'
        description: Search parameters
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: SUCCESS
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ERROR
      summary: Search for a model, dataset, or variable
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /list_concepts:
    get:
      description: |
        Request a list of currently available concepts. These are derived from the list of  [UN indicators](https://github.com/WorldModelers/Ontologies/blob/master/performer_ontologies/un_to_indicators.tsv) and are tied to model output variables.
      operationId: list_concepts_get
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableConcepts'
          description: SUCCESS
      summary: Obtain a list of available concepts
      tags:
      - concepts
      x-openapi-router-controller: openapi_server.controllers.concepts_controller
  /concept_mapping/{Concept}:
    get:
      description: Submit a concept name and receive an array of model related to that concept.
      operationId: concept_mapping_concept_get
      parameters:
      - description: The name of a concept.
        explode: false
        in: path
        name: Concept
        required: true
        schema:
          $ref: '#/components/schemas/ConceptName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptMapping'
          description: SUCCESS
      summary: Get an array of models related to a concept.
      tags:
      - concepts
      x-openapi-router-controller: openapi_server.controllers.concepts_controller
  /run_model:
    post:
      description: Submit a configuration to run a specific model. Model is run asynchronously. Results are available through `/run_results` endpoint. Note that the `requestBody` must include a `config` object which should have as its `keys` the appropriate model `parameter` `labels`. Each `key` should have a corresponding `parameter` `value`. If a `parameter` is missing it will be defaulted.
      operationId: run_model_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfig'
        description: Model and configuration parameters
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunID'
          description: SUCCESS
      summary: Run a model for a given a configuration
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /run_status/{RunID}:
    get:
      description: Submit a `RunID` and receive the model run status
      operationId: run_status_run_idget
      parameters:
      - description: The `ID` for a given model run.
        explode: false
        in: path
        name: RunID
        required: true
        schema:
          $ref: '#/components/schemas/RunID'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStatus'
          description: SUCCESS
      summary: Obtain status for a given model run
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /run_results/{RunID}:
    get:
      description: Submit a `RunID` and receive model run results metadata, including whether it succeeded or failed and where to access the result data.
      operationId: run_results_run_idget
      parameters:
      - description: The ID for a given model run.
        explode: false
        in: path
        name: RunID
        required: true
        schema:
          $ref: '#/components/schemas/RunID'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResults'
          description: SUCCESS
      summary: Obtain metadata about the results of a given model run
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /list_runs/{ModelName}:
    get:
      description: Submit a `ModelName` and receive an array of `RunID`s associated with the given model.
      operationId: list_runs_model_name_get
      parameters:
      - description: A model name
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RunID'
                type: array
          description: SUCCESS
      summary: Obtain a list of runs for a given model
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /available_results:
    get:
      description: Return a list of all available run results.
      operationId: available_results_get
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RunResults'
                type: array
          description: SUCCESS
      summary: Obtain a list of run results
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /result_file/{ResultFileName}:
    get:
      description: Submit a `ResultFileName` and receive model run result file.
      operationId: result_file_result_file_name_get
      parameters:
      - description: A file name of a result file.
        explode: false
        in: path
        name: ResultFileName
        required: true
        schema:
          $ref: '#/components/schemas/ResultFileName'
        style: simple
      responses:
        200:
          description: A result file
      summary: Obtain the result file for a given model run.
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
components:
  schemas:
    ModelName:
      description: A model's name
      example: FSC
      type: string
    StandardName:
      description: A standard name representation
      example:
        standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
        standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
        standard_variable_name: year
      properties:
        standard_variable_id:
          description: The MINT UUID associated with the standard name
          example: df1daca4-d727-5dc8-bfa4-fb20c717a32b
          type: string
        standard_variable_name:
          description: The natural language name for a standard name
          example: year
          type: string
        standard_variable_uri:
          description: The URI associated with the standard name
          example: http://www.geoscienceontology.org/svo/svl/property#year
          type: string
      required:
      - standard_variable_id
      - standard_variable_name
      - standard_variable_uri
      type: object
    Model:
      description: An object defining high-level metadata about a model
      example:
        versions:
        - "1.1"
        - "1.2"
        - LATEST
        name: FSC
        description: FSC single country shock configuration.
        label: label
        category:
        - Agriculture
        - Economic
        maintainer: Michael Puma, Columbia University
      properties:
        name:
          description: A model's name
          example: FSC
          type: string
        label:
          description: The human readable name of the model
          type: string
        versions:
          description: Latest model version
          example:
          - "1.1"
          - "1.2"
          - LATEST
          items:
            type: string
          type: array
        maintainer:
          description: Maintainer information for this model. Should include institution name and point of contact.
          example: Michael Puma, Columbia University
          type: string
        description:
          description: A basic overview of the model's purpose.
          example: FSC single country shock configuration.
          type: string
        category:
          description: The category for the given model.
          example:
          - Agriculture
          - Economic
          items:
            type: string
          type: array
      required:
      - description
      - label
      - maintainer
      - name
      type: object
    AvailableModels:
      description: An array of available models
      items:
        $ref: '#/components/schemas/Model'
      type: array
      uniqueItems: true
    ModelIO:
      description: Array of input or output files for the given model.
      items:
        $ref: '#/components/schemas/IOFile'
      type: array
    IOFile:
      description: An object that defines a single input or output file for a model
      example:
        filetype: WTH
        variables:
        - metadata: '{}'
          standard_names:
          - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
            standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
            standard_variable_name: year
          - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
            standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
            standard_variable_name: year
          name: name
          standard_name_ontology: standard_name_ontology
          units: units
        - metadata: '{}'
          standard_names:
          - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
            standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
            standard_variable_name: year
          - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
            standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
            standard_variable_name: year
          name: name
          standard_name_ontology: standard_name_ontology
          units: units
        name: NASA-POWER Weather Data
        description: Weather data from the NASA-POWER database. This database provides historical global weather data, including a minimum dataset of DSSAT, on 1-degree grids in ICASA Standards format.
      properties:
        name:
          description: The name of a given input or output file. This should be general and should not reference a specific file.
          example: NASA-POWER Weather Data
          type: string
        description:
          description: Description of the file.
          example: Weather data from the NASA-POWER database. This database provides historical global weather data, including a minimum dataset of DSSAT, on 1-degree grids in ICASA Standards format.
          type: string
        filetype:
          description: The file type (extension) for this file
          example: WTH
          type: string
        variables:
          description: An array of variables associated with a given input or output file
          items:
            $ref: '#/components/schemas/Variable'
          type: array
      required:
      - description
      - filetype
      - name
      type: object
    IORequest:
      description: A request object indicating whether the response should return either input or output files and for which model
      example:
        name: FSC
        iotype: input
      properties:
        name:
          description: A model's name
          example: FSC
          type: string
        iotype:
          enum:
          - input
          - output
          type: string
      type: object
    ModelConfig:
      description: A model configuration file (JSON).
      example:
        name: FSC
        config: '{}'
      properties:
        name:
          description: A model's name
          example: FSC
          type: string
        config:
          type: object
      required:
      - config
      - name
      type: object
    Variable:
      description: A variable used in a model input or output file.
      example:
        metadata: '{}'
        standard_names:
        - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
          standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
          standard_variable_name: year
        - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
          standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
          standard_variable_name: year
        name: name
        standard_name_ontology: standard_name_ontology
        units: units
      properties:
        name:
          type: string
        standard_names:
          items:
            $ref: '#/components/schemas/StandardName'
          type: array
        standard_name_ontology:
          type: string
        units:
          type: string
        metadata:
          type: object
      required:
      - name
      - standard_names
      type: object
    Parameter:
      description: A user configurable model parameter
      example:
        data_type: string
        description: The ISO 3 country code for the country of interest.
        default_value: USA
        standard_name:
        - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
          standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
          standard_variable_name: year
        - standard_variable_uri: http://www.geoscienceontology.org/svo/svl/property#year
          standard_variable_id: df1daca4-d727-5dc8-bfa4-fb20c717a32b
          standard_variable_name: year
        id: FSC-country-code
        label: FSC simulation country
      properties:
        id:
          description: Identifier associated with parameter in MINT
          example: FSC-country-code
          type: string
        description:
          description: Natural language description of parameter
          example: The ISO 3 country code for the country of interest.
          type: string
        label:
          description: The name of the parameter, which should be used as a `key` within a `config` sent to the `run_model` endpoint.
          example: FSC simulation country
          type: string
        data_type:
          description: The parameter's data type
          example: string
          type: string
        default_value:
          description: The parameter's default value. Type depends on the parameter's data_type
          example: USA
        standard_name:
          items:
            $ref: '#/components/schemas/StandardName'
          type: array
      required:
      - id
      type: object
    SearchResult:
      description: The result of a search
      items:
        type: object
      type: array
    Query:
      discriminator:
        propertyName: query_type
      properties:
        query_type:
          description: Is this a geo, time or text query?
          enum:
          - geo
          - time
          - text
          type: string
        result_type:
          description: Should the query return models, datasets, or variables?
          enum:
          - models
          - datasets
          - variables
          type: string
      required:
      - query_type
      - result_type
      type: object
    GeoQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: 'A geospatial bounding box search parameter is 4-elements in
          the WGS84 coordinate system: [xmin, ymin, xmax, ymax]. x is longitude, y
          is latitude'
        properties:
          xmin:
            description: Minimum longitude
            type: number
          xmax:
            description: Maximum longitude
            type: number
          ymin:
            description: Minimum latitude
            type: number
          ymax:
            description: Maximum latitude
            type: number
        required:
        - result_type
        - xmax
        - xmin
        - ymax
        - ymin
        type: object
    TimeQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: A query defined by a start and end time.
        properties:
          start_time:
            description: Minimum time for search query.
            type: string
          end_time:
            description: Maximum time for search query
            type: string
        required:
        - end_time
        - start_time
        type: object
    TextQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: A text string based query.
        properties:
          type:
            description: The type of query (either keyword or standard name)
            enum:
            - keyword
            - standard name
            type: string
          term:
            description: The search term of interest.
            type: string
        required:
        - term
        - type
        type: object
    RunID:
      description: ID associated with a model run. This is the SHA256 hash of the ModelConfig sent to the /run_model endpoint
      example: 3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04
      type: string
    ResultFileName:
      description: The name of a model run result file.
      example: 3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04.csv
      type: string
    RunStatus:
      description: Status information about a model run.
      enum:
      - PENDING
      - FAIL
      - SUCCESS
      type: string
    RunResults:
      description: Metadata about the results of a given model run.
      example:
        output: output
        auth_required: true
        config:
          name: FSC
          config: '{}'
        status: SUCCESS
        timestamp: 0
      properties:
        config:
          $ref: '#/components/schemas/ModelConfig'
        status:
          enum:
          - SUCCESS
          - FAIL
          - PENDING
          type: string
        output:
          description: URI for accessing output (for example, on S3)
          type: string
        auth_required:
          description: Does accessing this model output require authentification? True if requires auth.
          type: boolean
        timestamp:
          description: Epoch timestamp when the model run was initiated (epoch millis)
          format: int32
          type: integer
      required:
      - config
      - output
      - status
      type: object
    Error:
      description: Arbitrary error object.
      type: object
    ConceptName:
      description: A concept's name
      example: precipitation
      type: string
    AvailableConcepts:
      description: An array of available concept names
      items:
        $ref: '#/components/schemas/ConceptName'
      type: array
      uniqueItems: true
    ConceptMapping:
      description: |
        An array of models that relate to a concept
      items:
        $ref: '#/components/schemas/ModelName'
      type: array
    Concept:
      description: A concept and its mapping to model output variables.
      properties:
        concept_name:
          description: A concept's name
          example: precipitation
          type: string
        mappings:
          items:
            $ref: '#/components/schemas/ConceptMapping'
          type: array
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
